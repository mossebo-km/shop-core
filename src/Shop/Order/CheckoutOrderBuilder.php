<?php

namespace MosseboShopCore\Shop\Order;

use MosseboShopCore\Contracts\Shop\Cart\Cart;
use MosseboShopCore\Contracts\Shop\Customer;
use MosseboShopCore\Contracts\Shop\Delivery;
use MosseboShopCore\Contracts\Shop\Order\Order as OrderInterface;
use MosseboShopCore\Contracts\Shop\Payment;
use MosseboShopCore\Shop\Cart\Builders\CheckoutCartBuilder;

class CheckoutOrderBuilder extends AbstractOrderBuilder
{
    protected $checkoutData = null;

    public function __construct($checkoutData)
    {
        $this->checkoutData = $checkoutData;
    }

    protected function getCart(): ?Cart
    {
        return Shop::make(CheckoutCartBuilder::class, [
            'data' => $this->checkoutData
        ]);
    }

    protected function getCustomer(): ?Customer
    {
        parent::getCustomer(); // TODO: Change the autogenerated stub
    }

    protected function getDelivery(): ?Delivery
    {
        parent::getDelivery(); // TODO: Change the autogenerated stub
    }

    protected function getPayment(): ?Payment
    {
        parent::getPayment(); // TODO: Change the autogenerated stub
    }
}